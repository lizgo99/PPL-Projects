(define take
  (lambda (lst pos)
    (if (or (empty? lst) (= pos 0))
        '()
        (cons (car lst) (take (cdr lst) (- pos 1)))
    )
  )
)

(define take-map
  (lambda (lst func pos)
    (if (or (empty? lst) (= pos 0))
        '()
        (cons (func (car lst)) (take-map (cdr lst) func (- pos 1)))
    )
  )
)

(define take-filter
  (lambda (lst pred pos)
    (if (or (empty? lst) (= pos 0))
        '()
        (if (pred (car lst))
            (cons (car lst) (take-filter (cdr lst) pred (- pos 1)))
            (take-filter (cdr lst) pred pos)
        )
    )
  )
)


(define sub-size
  (lambda (lst size)
    (if (empty? lst)
        (if (= size 0)
            (list '())
            '())
          (sub-size-rec lst size (length lst))
    )
  )
)

(define sub-size-rec
  (lambda (lst size len)
    (if (< len size)
        '()
        (cons (take lst size)
              (sub-size-rec (cdr lst) size (- len 1))
        )
    )
  )
)

(define sub-size-map
  (lambda (lst func size)
        (if (empty? lst)
            (if (= size 0)
                (list '())
                '())
            (sub-size-map-rec lst func size (length lst))
    )
  )
)

(define sub-size-map-rec
  (lambda (lst func size len)
    (if (< len size)
        '()
        (cons (take-map lst func size)
              (sub-size-map-rec (cdr lst) func size (- len 1))
        )
    )
  )
)


(define root
  (lambda (tree)
    (car tree)
  )
)

(define left
  (lambda (tree)
    (car(cdr tree))
  )
)

(define right
  (lambda (tree)
    (car(cdr(cdr tree)))
  )
)


(define count-node
  (lambda (tree val)
    (if (empty? tree)
        0
        (if (not (pair? tree))
            (if (eq? tree val) 1 0)
            (+ (if (eq? (root tree) val) 1 0)
               (count-node (left tree) val)
               (count-node (right tree) val))
        )
    )
  )
)

(define mirror-tree
  (lambda (tree)
        (if (not (pair? tree))
            tree
            (list (root tree)
                  (mirror-tree (right tree))
                  (mirror-tree (left tree)))
        )
  )
)

(define make-ok
  (lambda (val)
    (cons 'ok val)
  )
)

(define make-error
  (lambda (msg)
    (cons 'error msg)
  )
)

(define ok?
  (lambda (res)
    (if (pair? res)
        (if (eq? (car res) 'ok) #t #f)
        #f
    )
  )
)

(define error?
  (lambda (res)
    (if (pair? res)
        (if (eq? (car res) 'error) #t #f)
        #f
    )
  )
)

(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
)

(define result->val
  (lambda (res)
    (if (result? res)
        (cdr res)
        (make-error "Error: not a result")
     )
  )
)

(define bind 
  (lambda (f)  
    (lambda (res)
      (if (ok? res)
          (f (result->val res))
          res
       )
    )
  )
)





